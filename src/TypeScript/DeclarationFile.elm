module TypeScript.DeclarationFile exposing (DeclarationFile, PortFunction, TSDocs, TypeString, write)

import String.Interpolate exposing (interpolate)
import TypeScript.Writer as Writer exposing (Writer)


{-| A valid TypeScript type, encoded in a string.
-}
type alias TypeString =
    String


{-| A jsdoc style doc comment.
-}
type alias TSDocs =
    String


{-| A "send" or "subscribe" function to interface with ports from TypeScript.
-}
type alias PortFunction =
    { name : String, body : TypeString }


{-| All of the formatted strings needed to build a declaration file. While
these parts of the declaration file are internally formatted, contextual
formatting such as indentation and ending semi-colons has not been applied.
-}
type alias DeclarationFile =
    { moduleParents : List String
    , moduleName : String
    , docs : Maybe TSDocs
    , flags : Maybe TypeString
    , ports : List PortFunction
    }


{-| Construct the full declaration file.
-}
write : DeclarationFile -> String
write { moduleParents, moduleName, docs, flags, ports } =
    Writer.file
        [ Writer.autoGeneratedFileWarning
        , Writer.newline
        , Writer.namespace
            { docs = Nothing, export = True, name = "Elm" }
            [ nestedParentNamespaces moduleParents
                [ Writer.namespace
                    { docs = docs, export = False, name = moduleName }
                    [ Writer.interface
                        { export = True, name = "App" }
                        [ Writer.ports ports ]
                    , Writer.initFn { moduleName = moduleName, flags = flags }
                    ]
                ]
            ]
        ]
        |> Writer.toString


{-| If the program module is nested in the module structure (probably a rare
edge case), wrap the program module declaration in nested namespaces. For
example:

    ```
    namespace Foo {
      namespace Bar {
        namespace Baz {
          // program module declaration
        }
      }
    }
    ```

-}
nestedParentNamespaces : List String -> List Writer -> Writer
nestedParentNamespaces parentModuleNames children =
    List.foldr
        (\parentModuleName child ->
            Writer.namespace
                { docs = Nothing, export = False, name = parentModuleName }
                [ child ]
        )
        (Writer.lines children)
        parentModuleNames
