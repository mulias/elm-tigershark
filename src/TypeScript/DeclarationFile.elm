module TypeScript.DeclarationFile exposing (write)

import String.Interpolate exposing (interpolate)
import TypeScript.ProgramDeclaration exposing (ProgramDeclaration)
import TypeScript.Writer as Writer exposing (Writer)


{-| Construct the full declaration file and output the resulting string.
-}
write : List ProgramDeclaration -> String
write declarations =
    declarations |> writeDeclarationFile |> Writer.toString


{-| Writer to construct the full declaration file.
-}
writeDeclarationFile : List ProgramDeclaration -> Writer
writeDeclarationFile declarations =
    Writer.file
        [ Writer.autoGeneratedFileWarning
        , Writer.newline
        , Writer.declareModule "'*.elm'"
            [ Writer.namespace { docs = Nothing, export = True, name = "Elm" }
                (List.map writeProgramDeclaration declarations)
            ]
        ]


{-| Writer to create an Elm program namespace containing types for the ports
interface and init function.
-}
writeProgramDeclaration : ProgramDeclaration -> Writer
writeProgramDeclaration { moduleParents, moduleName, docs, flags, ports } =
    writeNestedParentNamespaces moduleParents
        [ Writer.namespace { docs = docs, export = False, name = moduleName }
            [ Writer.interface { export = True, name = "App" }
                [ Writer.ports ports ]
            , Writer.initFn { moduleName = moduleName, flags = flags }
            ]
        ]


{-| If the program module is nested in the module structure (probably a rare
edge case), wrap the program module declaration in nested namespaces. For
example:

    ```
    namespace Foo {
      namespace Bar {
        namespace Baz {
          // program module declaration
        }
      }
    }
    ```

-}
writeNestedParentNamespaces : List String -> List Writer -> Writer
writeNestedParentNamespaces parentModuleNames children =
    List.foldr
        (\parentModuleName child ->
            Writer.namespace
                { docs = Nothing, export = False, name = parentModuleName }
                [ child ]
        )
        (Writer.lines children)
        parentModuleNames
